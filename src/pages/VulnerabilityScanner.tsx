
import { useState, useEffect, useRef } from "react";
import { z } from "zod";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { Form, FormControl, FormDescription, FormField, FormItem, FormLabel, FormMessage } from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Progress } from "@/components/ui/progress";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { 
  Loader2, 
  AlertCircle, 
  CheckCircle, 
  AlertTriangle, 
  Info, 
  Play, 
  Square, 
  Download,
  Clock,
  Target,
  Shield
} from "lucide-react";
import { scanService, ScanResult, Vulnerability } from "@/services/scanService";
import { useToast } from "@/hooks/use-toast";

const formSchema = z.object({
  target: z.string().min(1, { message: "Target is required" })
    .refine(value => /^[a-zA-Z0-9][a-zA-Z0-9-]{1,61}[a-zA-Z0-9](?:\.[a-zA-Z]{2,})+$|^(?:[0-9]{1,3}\.){3}[0-9]{1,3}$/.test(value), {
      message: "Enter a valid domain or IP address",
    }),
  scanType: z.string().min(1, { message: "Scan type is required" }),
});

const VulnerabilityScanner = () => {
  const [isScanning, setIsScanning] = useState(false);
  const [scanResults, setScanResults] = useState<ScanResult | null>(null);
  const [scanOutput, setScanOutput] = useState<string[]>([]);
  const [progress, setProgress] = useState(0);
  const [vulnerabilities, setVulnerabilities] = useState<Vulnerability[]>([]);
  const terminalRef = useRef<HTMLDivElement>(null);
  const { toast } = useToast();

  const form = useForm<z.infer<typeof formSchema>>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      target: "",
      scanType: "quick",
    },
  });

  useEffect(() => {
    const handleScanOutput = (event: CustomEvent) => {
      const line = event.detail;
      setScanOutput(prev => [...prev, line]);
      
      // Update progress based on scan phases
      if (line.includes('Starting')) setProgress(10);
      else if (line.includes('Initializing')) setProgress(20);
      else if (line.includes('port discovery')) setProgress(30);
      else if (line.includes('service enumeration')) setProgress(50);
      else if (line.includes('vulnerabilities')) setProgress(70);
      else if (line.includes('SSL/TLS')) setProgress(80);
      else if (line.includes('web application')) setProgress(90);
      else if (line.includes('completed')) setProgress(100);
    };

    const handleScanComplete = (event: CustomEvent) => {
      const result = event.detail as ScanResult;
      setScanResults(result);
      setVulnerabilities(result.vulnerabilities);
      setIsScanning(false);
      setProgress(100);
      
      toast({
        title: "Scan Completed",
        description: `Found ${result.vulnerabilities.length} vulnerabilities on ${result.target}`,
      });
    };

    window.addEventListener('scanOutput', handleScanOutput as EventListener);
    window.addEventListener('scanComplete', handleScanComplete as EventListener);

    return () => {
      window.removeEventListener('scanOutput', handleScanOutput as EventListener);
      window.removeEventListener('scanComplete', handleScanComplete as EventListener);
    };
  }, [toast]);

  useEffect(() => {
    // Auto-scroll terminal to bottom
    if (terminalRef.current) {
      terminalRef.current.scrollTop = terminalRef.current.scrollHeight;
    }
  }, [scanOutput]);

  const onSubmit = async (values: z.infer<typeof formSchema>) => {
    setIsScanning(true);
    setScanResults(null);
    setScanOutput([]);
    setVulnerabilities([]);
    setProgress(0);
    
    try {
      await scanService.startScan(values.target, values.scanType);
      
      toast({
        title: "Scan Started",
        description: `Vulnerability scan initiated for ${values.target}`,
      });
    } catch (error) {
      console.error("Scan error:", error);
      setIsScanning(false);
      toast({
        title: "Scan Failed",
        description: "Failed to start vulnerability scan",
        variant: "destructive",
      });
    }
  };

  const stopScan = () => {
    scanService.stopScan();
    setIsScanning(false);
    toast({
      title: "Scan Stopped",
      description: "Vulnerability scan has been stopped",
    });
  };

  const exportResults = () => {
    if (!scanResults) return;
    
    const data = JSON.stringify(scanResults, null, 2);
    const blob = new Blob([data], { type: 'application/json' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `scan_${scanResults.target}_${Date.now()}.json`;
    a.click();
    URL.revokeObjectURL(url);
  };

  const getSeverityIcon = (severity: string) => {
    switch (severity.toLowerCase()) {
      case 'critical':
        return <AlertCircle className="h-5 w-5 text-red-600" />;
      case 'high':
        return <AlertCircle className="h-5 w-5 text-red-500" />;
      case 'medium':
        return <AlertTriangle className="h-5 w-5 text-amber-500" />;
      case 'low':
        return <Info className="h-5 w-5 text-blue-500" />;
      default:
        return <CheckCircle className="h-5 w-5 text-green-500" />;
    }
  };

  const getSeverityBadge = (severity: string) => {
    switch (severity.toLowerCase()) {
      case 'critical':
        return <Badge className="bg-red-600">Critical</Badge>;
      case 'high':
        return <Badge variant="destructive">High</Badge>;
      case 'medium':
        return <Badge className="bg-amber-500">Medium</Badge>;
      case 'low':
        return <Badge className="bg-blue-500">Low</Badge>;
      default:
        return <Badge variant="secondary">Info</Badge>;
    }
  };

  const getSeverityCount = (severity: string) => {
    return vulnerabilities.filter(v => v.severity === severity).length;
  };

  return (
    <div className="space-y-6">
      <div>
        <h1 className="text-3xl font-bold tracking-tight text-cyber-blue font-mono">
          Advanced Vulnerability Scanner
        </h1>
        <p className="text-cyber-gray mt-2">
          Real-time security assessment with live output streaming
        </p>
      </div>

      {/* Scan Configuration */}
      <Card className="cyber-card">
        <CardHeader>
          <CardTitle className="text-xl font-mono flex items-center gap-2">
            <Target className="h-5 w-5" />
            Scan Configuration
          </CardTitle>
          <CardDescription>
            Configure your vulnerability assessment parameters
          </CardDescription>
        </CardHeader>
        <CardContent>
          <Form {...form}>
            <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <FormField
                  control={form.control}
                  name="target"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Target</FormLabel>
                      <FormControl>
                        <Input
                          placeholder="example.com or 192.168.1.1"
                          className="cyber-input"
                          {...field}
                          disabled={isScanning}
                        />
                      </FormControl>
                      <FormDescription>
                        Domain name or IP address to scan
                      </FormDescription>
                      <FormMessage />
                    </FormItem>
                  )}
                />

                <FormField
                  control={form.control}
                  name="scanType"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Scan Type</FormLabel>
                      <Select 
                        onValueChange={field.onChange} 
                        defaultValue={field.value}
                        disabled={isScanning}
                      >
                        <FormControl>
                          <SelectTrigger className="cyber-input">
                            <SelectValue placeholder="Select scan type" />
                          </SelectTrigger>
                        </FormControl>
                        <SelectContent>
                          <SelectItem value="quick">Quick Scan (5-10 min)</SelectItem>
                          <SelectItem value="full">Full Comprehensive Scan (30-60 min)</SelectItem>
                          <SelectItem value="web">Web Application Focus</SelectItem>
                          <SelectItem value="network">Network Infrastructure</SelectItem>
                        </SelectContent>
                      </Select>
                      <FormDescription>
                        Select the scope and intensity of the scan
                      </FormDescription>
                      <FormMessage />
                    </FormItem>
                  )}
                />
              </div>

              <div className="flex gap-2">
                <Button 
                  type="submit" 
                  className="cyber-btn flex-1" 
                  disabled={isScanning}
                >
                  {isScanning ? (
                    <>
                      <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                      Scanning...
                    </>
                  ) : (
                    <>
                      <Play className="mr-2 h-4 w-4" />
                      Start Vulnerability Scan
                    </>
                  )}
                </Button>
                
                {isScanning && (
                  <Button 
                    type="button" 
                    variant="destructive" 
                    onClick={stopScan}
                  >
                    <Square className="mr-2 h-4 w-4" />
                    Stop
                  </Button>
                )}
              </div>

              {isScanning && (
                <div className="space-y-2">
                  <div className="flex justify-between text-sm">
                    <span>Scan Progress</span>
                    <span>{progress}%</span>
                  </div>
                  <Progress value={progress} className="w-full" />
                </div>
              )}
            </form>
          </Form>
        </CardContent>
      </Card>

      {/* Live Terminal Output */}
      <Card className="cyber-card">
        <CardHeader>
          <CardTitle className="text-lg font-mono">Live Scan Output</CardTitle>
          <CardDescription>Real-time scanner output and progress</CardDescription>
        </CardHeader>
        <CardContent>
          <div 
            ref={terminalRef}
            className="bg-black text-green-400 font-mono text-sm p-4 rounded-md h-64 overflow-auto border"
          >
            {scanOutput.length === 0 ? (
              <div className="text-gray-500">Waiting for scan to start...</div>
            ) : (
              <pre className="whitespace-pre-wrap">
                {scanOutput.join('\n')}
                {isScanning && <span className="animate-pulse">_</span>}
              </pre>
            )}
          </div>
        </CardContent>
      </Card>

      {/* Results Section */}
      {scanResults && (
        <Tabs defaultValue="summary" className="w-full">
          <TabsList className="grid w-full grid-cols-3">
            <TabsTrigger value="summary">Summary</TabsTrigger>
            <TabsTrigger value="vulnerabilities">Vulnerabilities</TabsTrigger>
            <TabsTrigger value="details">Technical Details</TabsTrigger>
          </TabsList>

          <TabsContent value="summary">
            <Card className="cyber-card">
              <CardHeader>
                <div className="flex justify-between items-center">
                  <div>
                    <CardTitle className="text-xl font-mono flex items-center gap-2">
                      <Shield className="h-5 w-5" />
                      Scan Summary
                    </CardTitle>
                    <CardDescription>
                      Target: {scanResults.target} | 
                      Type: {scanResults.scanType.toUpperCase()} | 
                      <Clock className="inline h-4 w-4 mx-1" />
                      {new Date(scanResults.startTime).toLocaleString()}
                    </CardDescription>
                  </div>
                  <Button variant="outline" onClick={exportResults}>
                    <Download className="mr-2 h-4 w-4" />
                    Export
                  </Button>
                </div>
              </CardHeader>
              <CardContent>
                <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                  <div className="text-center p-4 border rounded-lg bg-red-50 dark:bg-red-950">
                    <div className="text-2xl font-bold text-red-600">{getSeverityCount('critical')}</div>
                    <div className="text-sm text-red-600">Critical</div>
                  </div>
                  <div className="text-center p-4 border rounded-lg bg-orange-50 dark:bg-orange-950">
                    <div className="text-2xl font-bold text-orange-600">{getSeverityCount('high')}</div>
                    <div className="text-sm text-orange-600">High</div>
                  </div>
                  <div className="text-center p-4 border rounded-lg bg-yellow-50 dark:bg-yellow-950">
                    <div className="text-2xl font-bold text-yellow-600">{getSeverityCount('medium')}</div>
                    <div className="text-sm text-yellow-600">Medium</div>
                  </div>
                  <div className="text-center p-4 border rounded-lg bg-blue-50 dark:bg-blue-950">
                    <div className="text-2xl font-bold text-blue-600">{getSeverityCount('low')}</div>
                    <div className="text-sm text-blue-600">Low</div>
                  </div>
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          <TabsContent value="vulnerabilities">
            <Card className="cyber-card">
              <CardHeader>
                <CardTitle className="text-xl font-mono">Vulnerabilities Found</CardTitle>
                <CardDescription>
                  Detailed vulnerability analysis and recommendations
                </CardDescription>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  {vulnerabilities.length === 0 ? (
                    <div className="text-center p-8 text-cyber-gray">
                      <CheckCircle className="mx-auto h-12 w-12 text-green-500 mb-4" />
                      <h3 className="text-lg font-medium mb-2">No Vulnerabilities Detected!</h3>
                      <p>The scan completed successfully with no security issues found.</p>
                    </div>
                  ) : (
                    vulnerabilities.map((vuln, index) => (
                      <div 
                        key={index} 
                        className="p-6 border border-cyber-blue/20 rounded-lg bg-cyber-blue/5"
                      >
                        <div className="flex items-start gap-4">
                          <div className="mt-1">
                            {getSeverityIcon(vuln.severity)}
                          </div>
                          <div className="flex-1">
                            <div className="flex justify-between items-start mb-2">
                              <h3 className="font-semibold text-lg text-cyber-lightgray">
                                {vuln.title}
                              </h3>
                              {getSeverityBadge(vuln.severity)}
                            </div>
                            <p className="text-cyber-gray mb-3">{vuln.description}</p>
                            
                            <div className="grid grid-cols-1 md:grid-cols-3 gap-4 text-sm">
                              {vuln.port && (
                                <div>
                                  <span className="font-medium">Port:</span> {vuln.port}
                                </div>
                              )}
                              {vuln.service && (
                                <div>
                                  <span className="font-medium">Service:</span> {vuln.service}
                                </div>
                              )}
                              {vuln.cvss && (
                                <div>
                                  <span className="font-medium">CVSS Score:</span> {vuln.cvss}
                                </div>
                              )}
                            </div>
                            
                            {vuln.recommendation && (
                              <div className="mt-4 p-3 bg-blue-50 dark:bg-blue-950 rounded-md">
                                <h4 className="font-medium text-blue-800 dark:text-blue-200 mb-1">
                                  Recommendation:
                                </h4>
                                <p className="text-blue-700 dark:text-blue-300 text-sm">
                                  {vuln.recommendation}
                                </p>
                              </div>
                            )}
                          </div>
                        </div>
                      </div>
                    ))
                  )}
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          <TabsContent value="details">
            <Card className="cyber-card">
              <CardHeader>
                <CardTitle className="text-xl font-mono">Technical Details</CardTitle>
                <CardDescription>Raw scan output and technical information</CardDescription>
              </CardHeader>
              <CardContent>
                <div className="bg-black text-green-400 font-mono text-sm p-4 rounded-md max-h-96 overflow-auto">
                  <pre className="whitespace-pre-wrap">
                    {scanResults.rawOutput.join('\n')}
                  </pre>
                </div>
              </CardContent>
            </Card>
          </TabsContent>
        </Tabs>
      )}
    </div>
  );
};

export default VulnerabilityScanner;
