
import { useState } from "react";
import { z } from "zod";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { Form, FormControl, FormDescription, FormField, FormItem, FormLabel, FormMessage } from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Loader2, AlertCircle, CheckCircle, AlertTriangle, Info } from "lucide-react";
import { mockScanVulnerabilities } from "@/lib/supabase";
import CyberTerminal from "@/components/CyberTerminal";

const formSchema = z.object({
  target: z.string().min(1, { message: "Target is required" })
    .refine(value => /^[a-zA-Z0-9][a-zA-Z0-9-]{1,61}[a-zA-Z0-9](?:\.[a-zA-Z]{2,})+$|^(?:[0-9]{1,3}\.){3}[0-9]{1,3}$/.test(value), {
      message: "Enter a valid domain or IP address",
    }),
  scanType: z.string().min(1, { message: "Scan type is required" }),
});

const VulnerabilityScanner = () => {
  const [isScanning, setIsScanning] = useState(false);
  const [scanResults, setScanResults] = useState<any>(null);
  const [scanOutput, setScanOutput] = useState<string[]>([]);

  const form = useForm<z.infer<typeof formSchema>>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      target: "",
      scanType: "quick",
    },
  });

  const onSubmit = async (values: z.infer<typeof formSchema>) => {
    setIsScanning(true);
    setScanResults(null);
    
    // Simulate terminal output
    setScanOutput([
      `[*] Starting vulnerability scan on target: ${values.target}`,
      `[*] Scan type: ${values.scanType.toUpperCase()}`,
      `[*] Initializing scanner...`,
    ]);
    
    // Simulate gradual terminal output
    setTimeout(() => {
      setScanOutput(prev => [...prev, `[*] Running port scan...`]);
    }, 800);
    
    setTimeout(() => {
      setScanOutput(prev => [...prev, `[*] Detecting services...`]);
    }, 1600);
    
    setTimeout(() => {
      setScanOutput(prev => [...prev, `[*] Checking for vulnerabilities...`]);
    }, 2400);

    try {
      const results = await mockScanVulnerabilities(values.target, values.scanType);
      
      setTimeout(() => {
        setScanOutput(prev => [
          ...prev, 
          `[+] Scan completed successfully!`,
          `[+] Found ${results.results.length} potential vulnerabilities`,
        ]);
        setScanResults(results);
        setIsScanning(false);
      }, 3000);
      
    } catch (error) {
      console.error("Scan error:", error);
      setScanOutput(prev => [...prev, `[!] Error during scan: ${error}`]);
      setIsScanning(false);
    }
  };

  const getSeverityIcon = (severity: string) => {
    switch (severity.toLowerCase()) {
      case 'high':
        return <AlertCircle className="h-5 w-5 text-red-500" />;
      case 'medium':
        return <AlertTriangle className="h-5 w-5 text-amber-500" />;
      case 'low':
        return <Info className="h-5 w-5 text-blue-500" />;
      default:
        return <CheckCircle className="h-5 w-5 text-green-500" />;
    }
  };

  const getSeverityBadge = (severity: string) => {
    switch (severity.toLowerCase()) {
      case 'high':
        return <Badge variant="destructive">High</Badge>;
      case 'medium':
        return <Badge className="bg-amber-500">Medium</Badge>;
      case 'low':
        return <Badge className="bg-blue-500">Low</Badge>;
      default:
        return <Badge variant="secondary">Info</Badge>;
    }
  };

  return (
    <div className="space-y-6">
      <div>
        <h1 className="text-3xl font-bold tracking-tight text-cyber-blue font-mono">Vulnerability Scanner</h1>
        <p className="text-cyber-gray mt-2">
          Scan systems for potential security vulnerabilities
        </p>
      </div>

      <Card className="cyber-card">
        <CardHeader>
          <CardTitle className="text-xl font-mono">Scan Configuration</CardTitle>
          <CardDescription>
            Enter the target and scan settings
          </CardDescription>
        </CardHeader>
        <CardContent>
          <Form {...form}>
            <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
              <FormField
                control={form.control}
                name="target"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Target</FormLabel>
                    <FormControl>
                      <Input
                        placeholder="example.com or 192.168.1.1"
                        className="cyber-input"
                        {...field}
                        disabled={isScanning}
                      />
                    </FormControl>
                    <FormDescription>
                      Domain name or IP address to scan
                    </FormDescription>
                    <FormMessage />
                  </FormItem>
                )}
              />

              <FormField
                control={form.control}
                name="scanType"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Scan Type</FormLabel>
                    <Select 
                      onValueChange={field.onChange} 
                      defaultValue={field.value}
                      disabled={isScanning}
                    >
                      <FormControl>
                        <SelectTrigger className="cyber-input">
                          <SelectValue placeholder="Select scan type" />
                        </SelectTrigger>
                      </FormControl>
                      <SelectContent>
                        <SelectItem value="quick">Quick Scan</SelectItem>
                        <SelectItem value="full">Full Scan</SelectItem>
                        <SelectItem value="nikto">Nikto Scan (Web)</SelectItem>
                      </SelectContent>
                    </Select>
                    <FormDescription>
                      Select the intensity and type of scan
                    </FormDescription>
                    <FormMessage />
                  </FormItem>
                )}
              />

              <Button 
                type="submit" 
                className="w-full cyber-btn" 
                disabled={isScanning}
              >
                {isScanning ? (
                  <>
                    <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                    Scanning...
                  </>
                ) : (
                  "Run Vulnerability Scan"
                )}
              </Button>
            </form>
          </Form>
        </CardContent>
      </Card>

      <CyberTerminal 
        content={scanOutput} 
        className="h-64"
      />

      {scanResults && (
        <Card className="cyber-card">
          <CardHeader>
            <CardTitle className="text-xl font-mono">Scan Results</CardTitle>
            <CardDescription>
              Target: {scanResults.target} | 
              Scan Type: {scanResults.scan_type.toUpperCase()} | 
              Time: {new Date(scanResults.timestamp).toLocaleString()}
            </CardDescription>
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              {scanResults.results.length === 0 ? (
                <div className="text-center p-4 text-cyber-gray">
                  <CheckCircle className="mx-auto h-8 w-8 text-green-500 mb-2" />
                  <p>No vulnerabilities detected!</p>
                </div>
              ) : (
                scanResults.results.map((vuln: any, index: number) => (
                  <div 
                    key={index} 
                    className="p-4 border border-cyber-blue/20 rounded-md bg-cyber-blue/5 flex items-start gap-4"
                  >
                    <div className="mt-1">
                      {getSeverityIcon(vuln.severity)}
                    </div>
                    <div className="flex-1">
                      <div className="flex justify-between items-center">
                        <h3 className="font-medium text-cyber-lightgray">{vuln.title}</h3>
                        {getSeverityBadge(vuln.severity)}
                      </div>
                      <p className="text-cyber-gray mt-1">{vuln.description}</p>
                      {vuln.port && (
                        <p className="text-sm text-cyber-gray mt-2">Port: {vuln.port}</p>
                      )}
                    </div>
                  </div>
                ))
              )}
            </div>
          </CardContent>
        </Card>
      )}
    </div>
  );
};

export default VulnerabilityScanner;
